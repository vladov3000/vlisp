;; First, some basic arithmetic.

(+ 137 349)
;; 486

(- 1000 334)
;; 666

(* 5 99)
;; 495

(+ 2.7 10)
;; 12.7

(- 12.7 10)
;; 2.7

(* 0.5 2 0.5)
;; 0.5

(+ 21 35 12 7)
;; 75

(* 25 4 12)
;; 1200

(+ (* 3 5) (- 10 6))
;; 19

(+ (* 3 (+ 2 4) (+ 3 5)) (+ (- 10 7) 6))
;; 153

(define size 2)
;; "define" returns the value defined. So this evaluates to 2.

size
;; 2

(* 5 size)
;; 10

(define pi 3.14159)
(define radius 10)
(* pi (* radius radius))
;; 314.159

(define circumference (* 2 pi radius))
;; 62.8138

(define (square x) (* x x))
;; <square x>

(square 21)
;; 441

(square (+ 2 5))
;; 49

(square (square 3))
;; 81

(define (sum-of-squares x y)
  (+ (square x) (square y)))
(sum-of-squares 3 4)
;; 25

(define (f a)
  (sum-of-squares (+ a 1) (* a 2)))
(f 5)
;; 136

(> 1 1)
;; ()

(define (abs x)
  (cond ((> x 0) x)
	((= x 0) 0)
	((< x 0) (- x))))
(abs -5)
;; 5

;; Define "else" to be truthy so it can be used in the final clause of a "cond".
(define else 0)

(define (abs' x)
  (cond ((< x 0) (- x))
	(else    x)))

(abs' -5)
;; 5

(define (abs'' x)
  (if (< x 0) (- x) x))

(abs'' -5)
;; 5

(define (between-5-and-10 x)
  (and (> x 5) (< x 10)))

(between-5-and-10 7)
;; t

(between-5-and-10 1)
;; ()

(define (>= x y)
  (or (= x y) (> x y)))

(>= 1 1) ;; t
(>= 2 1) ;; t
(>= 0 1) ;; ()

(define (>=' x y)
  (not (< x y)))

(>=' 1 1) ;; t
(>=' 2 1) ;; t
(>=' 0 1) ;; ()

;; Exercise 1.1
10        ;; 10
(+ 5 3 4) ;; 12
(- 9 1)   ;; 8
(/ 6 2)   ;; 3

(+ (* 2 4) (- 4 6)) ;; 6

(define a 3)       ;; 3
(define b (+ a 1)) ;; 4
(+ a b (* a b))    ;; 19
(= a b)            ;; ()

(if (and (> b a) (< b (* a b)))
    b
    a)
;; 4

(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else    25))
;; 16

(+ 2 (if (> b a) b a))
;; 6

(* (cond ((> a b) a)
	 ((< a b) b)
	 (else    -1))
   (+ a 1))
;; 16

;; Exercise 1.2

(/ (+ 5 4 (- 2 (- 3 (+ 6 (/ 4.0 5)))))
   (* 3 (- 6 2) (- 2 7)))
;; -0.2466

;; Exercise 1.3
(define (<= x y) (or (= x y) (< x y)))

(define (sum-of-squares3 x y z)
  (cond ((and (x <= y) (x <= z)) (sum-of-squares y z))
	((and (y <= x) (y <= z)) (sum-of-squares x z))
	((and (z <= x) (z <= y)) (sum-of-squares x y))))

;; Exercise 1.4
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(a-plus-abs-b 1  1) ;; 2
(a-plus-abs-b 1 -1) ;; 2

;; Exercise 1.5
(define (p) (p))

(define (test x y)
  (if (= x 0) 0 y))

;; This will crash because "(p)" is evaluated.
;; (test 0 (p))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (improve guess x)
  (average guess (/ x guess)))

(define (average x y)
  (/ (+ x y) 2))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 9)
;; 3.0000

(sqrt (+ 100 37))
;; 11.7046

(sqrt (+ (sqrt 2) (sqrt 3)))
;; 1.7739

(square (sqrt 1000))
;; 1000.0003

(square (sqrt 0.00001)) ;; 0.0009
(square (sqrt 1000000)) ;; 1000000

(define (sqrt-iter guess x)
  (define next (improve guess x))
  (if (< (abs (- guess next)) 0.001)
      guess
      (sqrt-iter next x)))

;; We use 64-bit floats so improving the algorithm doesn't really make a difference.
(square (sqrt 0.00001)) ;; 0.0009
(square (sqrt 1000000)) ;; 1000000

(define (cube-root-iter guess x)
  (define next (/ (+ (/ x (square guess)) (* 2 guess)) 3))
  (if (< (abs (- guess next)) 0.001)
      guess
      (cube-root-iter next x)))

(define (cube-root x)
  (cube-root-iter 1 x))

(cube-root 27) ;; 3

(define (double x) (+ x x))

(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
(factorial 1) ;; 1
(factorial 3) ;; 6
(factorial 5) ;; 120

;; Exercise 1.10
(define (A x y)
  (cond ((= y 0) 0)
	((= x 0) (* 2 y))
	((= y 1) 2)
	(else (A (- x 1) (A x (- y 1))))))

(A 0 2)
(A 1 10) ;; 0 2 4 8 16 ... 1024
(A 2 4)  ;; 0 2 4 16 65536
(A 3 3)  ;; ... 65536

(define (f n) (A 0 n)) ;; f(n) = 2 * n
(define (g n) (A 1 n)) ;; g(n) = 2 ^ n
(define (h n) (A 2 n)) ;; h(n) = ???

(define (fib n)
  (cond ((= n 0) 0)
	((= n 1) 1)
	(else (+ (fib (- n 1))
		 (fib (- n 2))))))

(fib 3) ;; 2
(fib 4) ;; 3
(fib 5) ;; 5

(define (fib n)
  (fib-iter 1 0 n))

(define (fib-iter a b count)
  (if (= count 0)
      b
      (fib-iter (+ a b) a (- count 1))))

(fib 3) ;; 2
(fib 4) ;; 3
(fib 5) ;; 5

;; Exercise 1.11

(define (f n)
  (if (< n 3)
      n
      (+ (f (- n 1)) (* 2 (f (- n 2))) (* 3 (f (- n 3))))))

(f 3)  ;; 4
(f 4)  ;; 11
(f 10) ;; 1892

(define (f-iter a b c n)
  (if (= n 2)
      a
      (f-iter (+ a (* 2 b) (* 3 c)) a b (- n 1))))

(define (f n)
  (if (< n 3)
      n
      (f-iter 2 1 0 n)))
      
(f 3)  ;; 4
(f 4)  ;; 11
(f 10) ;; 1892

(define (pascals-triangle row column)
  (if (or (= column 1) (= column row))
      1
      (+ (pascals-triangle (- row 1) (- column 1))
	 (pascals-triangle (- row 1) column))))

(pascals-triangle 1 1) ;; 1
(pascals-triangle 3 2) ;; 2
(pascals-triangle 4 2) ;; 3
(pascals-triangle 5 3) ;; 6

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

(sine (/ pi 2)) ;; 1
(sine (/ pi 6)) ;; 0.5

(define (expt b n)
  (if (= n 0)
      1
      (* b (expt b (- n 1)))))

(expt 2 10) ; 1024

(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b n result)
  (if (= n 0)
      result
      (expt-iter b (- n 1) (* b result))))

(expt 2 10) ; 1024

(define (expt b n)
  (cond ((= n 0)   1)
	((even? n) (square (expt b (/ n 2))))
	(else      (* b (expt b (- n 1))))))

(define (even? n)
  (= (remainder n 2) 0))

(expt 2 10) ; 1024

;; Exercise 1.16

(define (expt b n)
  (expt-iter b n 1))

(define (expt-iter b n result)
  (cond ((= n 0)   result)
	((even? n) expt-iter b (/ n 2) (square result))
	(else      expt-iter b (- n 1) (* b result))))

(expt 2 10) ; 1024

;; Exercise 1.17

(define (*' a b)
  (if (= b 0)
      0
      (+ a (*' a (- b 1)))))

(*' 3 4) ;; 12

;; Exercise 1.18

(define (*'-iter a b result)
  (cond ((= b 0)   result)
	((even? b) (*'-iter (double a) (/ b 2) result))
	(else      (*'-iter a (- b 1) (+ a result)))))

(define (*' a b)
  (*'-iter a b 0))

(*' 3 4) ;; 12

;; Exercise 1.19

(define (fib-iter a b p q count)
  (cond ((= count 0)   b)
	((even? count) (fib-iter a
				 b
				 (+ (square p) (square q))
				 (+ (* 2 p q) (square q))
				 (/ count 2)))
	(else          (fib-iter (+ (* b q) (* a q) (* a p))
				 (+ (* b p) (* a q))
				 p
				 q
				 (- count 1)))))

(define (fib n)
  (fib-iter 1 0 0 1 n))

(fib 1)  ;; 1
(fib 3)  ;; 2
(fib 5)  ;; 5
(fib 10) ;; 55

(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(gcd 206 40) ;; 2

(define (smallest-divisor n) (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b) (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

(prime? 4) ;; ()
(prime? 7) ;; t

(define (expmod base exp m)
  (cond ((= exp 0)   1)
	((even? exp) (remainder (square (expmod base (/ exp 2) m)) m))
	(else        (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define true  0)
(define false (not true))

(define (fast-prime? n times)
  (cond ((= times 0)     true)
	((fermat-test n) (fast-prime? n (- times 1)))
	(else            false)))

(fast-prime? 4 1) ;; ()
(fast-prime? 7 1) ;; 0

;; Exercise 1.21
(smallest-divisor 199)
(smallest-divisor 1999)
(smallest-divisor 19999)

;; Exercise 1.22
(define (newline) (display "\n"))

(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (runtime) start-time))))

(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time)
  (newline)
  elapsed-time)

(define (search-for-primes start end)
  (cond ((> start end)  nil)
	((prime? start) start)
	(else           (search-for-primes (+ start 1) end))))

;; (search-for-primes 1000 9999) ;; 1009
;; (search-for-primes 10000 99999) ;; 10007
;; (search-for-primes 100000 999999) ;; 100003
;; (search-for-primes 1000000 9999999) ;; 1000003

;; (timed-prime-test 1009)    ;; 145
;; (timed-prime-test 10007)   ;; 675
;; (timed-prime-test 100003)  ;; 5279
;; (timed-prime-test 1000003) ;; 58178

(define (next n)
  (if (= n 2) 3 (+ n 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (next test-divisor)))))

;; (timed-prime-test 1009) ;; 87

;; Exercise 1.24
(define (start-prime-test n start-time)
  (if (fast-prime? n 1)
      (report-prime (- (runtime) start-time))))

;; (timed-prime-test 1009)    ;; 70
;; (timed-prime-test 10007)   ;; 90
;; (timed-prime-test 100003)  ;; 110
;; (timed-prime-test 1000003) ;; 124

;; Exercise 1.27
(define (fools-fermat-test n)
  (fools-fermat-test-iter n 0))

(define (fools-fermat-test-iter n a)
  (if (= a n)
      true
      (and (= a (expmod a n n)) (fools-fermat-test-iter n (+ a 1)))))

;; (fools-fermat-test 561) ;; true

;; Exercise 1.28
(define (filter-trivial n)
  (if (= n 1) 0 n))

(define (expmod' base exp m)
  (cond ((= exp 0)   1)
	((even? exp) (filter-trivial (remainder (square (expmod base (/ exp 2) m)) m)))
	(else        (remainder (* base (expmod base (- exp 1) m)) m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (= (expmod' a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0)           true)
	((miller-rabin-test n) (fast-prime? n (- times 1)))
	(else                  false)))

(fast-prime? 4 2)     ;; ()
(fast-prime? 561 200) ;; 0

(define (sum-integers a b)
  (if (> a b) 0 (+ a (sum-integers (+ a 1) b))))

(define (sum-cubes a b)
  (if (> a b) 0 (+ (cube a) (sum-integers (+ a 1) b))))

(define (pi-sum a b)
  (if (> a b)
      0
      (+ (/ 1.0 (* a (+ a 2)))
	 (pi-sum (+ a 4) b))))

(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
	 (sum term (next a) next b))))

(define (increment n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a increment b))

(define (identity x) x)

(define (sum-integers a b)
  (sum identity a increment b))

(sum-integers 1 10) ;; 55

(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(* 8 (pi-sum 1 1000)) ;; 3.1395

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))

(integral cube 0 1 0.001) ;; 0.2499

;; Exercise 1.29
(define (simpson-integral f a b n)
  (define h (/ (- b a) 1.0 n))
  (define (term k)
    (* (cond ((or (= k 0) (= k n)) 1)
	     ((even? k)            2)
	     (else                 4))
       (f (+ a (* k h)))))
  (* (/ h 3)
     (sum term 0 increment n)))

(simpson-integral cube 0 1 100)  ;; 0.2499
(simpson-integral cube 0 1 1000) ;; 0.25

;; Exercise 1.30
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (+ (term a) result))))
  (iter a 0))

(sum identity 0 increment 3) ;; 6

;; Exercise 1.31
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (* (term a) result))))
  (iter a 1))

(product identity 1 increment 3) ;; 6

(define (factorial n)
  (product identity 1 increment n))

(factorial 5) ;; 120

(define (compute-pi n)
  (define (term i)
    (/ (+ (* (/ (+ i 1) 2) 2) 2)
       1.0
       (+ (* (/ i 2) 2) 3)))
  (* 4 (product term 0 increment n)))

(compute-pi 3) ;; 3.41

;; Exercise 1.32
(define (accumulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
	result
	(iter (next a) (combiner (term a) result))))
  (iter a null-value))

(define (sum term a next b)
  (accumulate + 0 term a next b))

(define (product term a next b)
  (accumulate * 1 term a next b))

;; Exercise 1.33
(define (filtered-accumulate combiner null-value filter term a next b)
  (define (iter a result)
    (if (or (> a b) (not (filter a))))
	result
	(iter (next a) (combiner (term a) result)))
  (iter a null-value))

(define (sum-of-primes-squared a b)
  (filtered-accumulate + 0 prime? square a increment b))

(define (product-relative-primes n)
  (define (filter i)
    (= (gcd i n) 1))
  (filtered-accumulate * 1 filter identity 2 increment n))

(lambda (x) (+ x 4))

(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))

(* 8 (pi-sum 1 1000)) ;; 3.1395

(define (f x y)
  (let ((a (+ 1 (* x y)))
	(b (- 1 y)))
    (+ (* x (square a))
       (* y b)
       (* a b))))

(f 1 1)

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

(fixed-point cos 1.0) ;; 0.739082

(fixed-point (lambda (y) (+ (sin y) (cos y))) 1.0) ;; 1.258731

(define (sqrt x)
  (fixed-point (lambda (y) (average y (/ x y))) 1.0))

(sqrt 4) ;; 2.0

;; Exercise 1.35
(define phi (fixed-point (lambda (x) (+ 1 (/ 1 x))) 1.0)) ;; 1.618032

;; Exercise 1.36
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

;; (fixed-point (lambda (x) (/ (log 1000) (log x))) 10.0) ;; 4.555532

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
	  next
	  (try next))))
  (try first-guess))

;; Exercise 1.37
(define (cont-frac n d k)
  (define (iterate i result)
    (if (= i 0)
	result
	(iterate (- i 1) (/ (n i) (+ (d i) result)))))
  (iterate k 0))

(define phi
  (/ 1
     (cont-frac (lambda (i) 1.0)
		(lambda (i) 1.0)
		100))) ;; 1.618033

;; Exercise 1.38
(define e
  (cont-frac (lambda (i) 1.0)
	     (lambda (i)
	       (if (= (remainder i 3) 1)
			     (* (/ i 3) 2)
			     1))
	     100)) ;; 0.718281

;; Exercise 1.39
(define (tan-cf x k)
  (cont-frac (lambda (i) (* (expt x i) (if (= i 1) 1 -1)))
	     (lambda (i) (- (* 2 i) 1))
	     k))

(tan-cf (/ pi 4) 100) ;; 0.997402

(define (average-damp f)
  (lambda (x) (average x (f x))))

((average-damp square) 10) ;; 55

(define (sqrt x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
	       1.0))

(sqrt 4) ;; 2.0

(define (cube-root x)
  (fixed-point (average-damp (lambda (y) (/ x (square y))))
	       1.0))

(cube-root 8) ;; 1.9999

(define dx 0.00001)

(define (derivative g)
  (lambda (x) (/ (- (g (+ x dx)) (g x)) dx)))

((derivative cube) 5) ;; 75

(define (newton-transform g)
  (lambda (x) (- x (/ (g x) ((derivative g) x)))))

(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))

(define (sqrt x)
  (newtons-method (lambda (y) (- (square y) x))
		  1.0))

(sqrt 4) ;; 2

;; Exercise 1.40
(define (cubic a b c)
  (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)))

;; Exercise 1.41
(define (double f)
  (lambda (x) (f (f x))))

(((double (double double)) increment) 5) ;; 21

;; Exercise 1.42
(define (compose f g)
  (lambda (x) (f (g x))))

((compose square increment) 6) ;; 49

;; Exercise 1.43
(define (repeated f n)
  (if (= n 0)
      identity
      (compose f (repeated f (- n 1)))))

((repeated square 2) 5) ;; 625

;; Exercise 1.44
(define (smooth f x)
  (/ (+ (f (- x dx)) (f x) (f (+ x dx)))
     3))


